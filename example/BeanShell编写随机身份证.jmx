<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="测试计划" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="用户定义的变量" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="线程组" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="循环控制器" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1520835391000</longProp>
        <longProp name="ThreadGroup.end_time">1520835391000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler--生成" enabled="true">
          <stringProp name="BeanShellSampler.query">import java.util.*;
StringBuilder generater = new StringBuilder();
Map areaCode = new HashMap();

areaCode.put(&quot;北京市&quot;, 110000);
areaCode.put(&quot;市辖区&quot;, 110100);
areaCode.put(&quot;东城区&quot;, 110101);
areaCode.put(&quot;西城区&quot;, 110102);
areaCode.put(&quot;崇文区&quot;, 110103);
areaCode.put(&quot;宣武区&quot;, 110104);
areaCode.put(&quot;朝阳区&quot;, 110105);
areaCode.put(&quot;丰台区&quot;, 110106);
areaCode.put(&quot;石景山区&quot;, 110107);
areaCode.put(&quot;清河门区&quot;, 210905);
areaCode.put(&quot;细河区&quot;, 210911);
areaCode.put(&quot;彰武县&quot;, 210922);
areaCode.put(&quot;辽阳市&quot;, 211000);
areaCode.put(&quot;市辖区&quot;, 211001);
areaCode.put(&quot;白塔区&quot;, 211002);
areaCode.put(&quot;文圣区&quot;, 211003);
areaCode.put(&quot;宏伟区&quot;, 211004);
areaCode.put(&quot;新北区&quot;, 320411);
areaCode.put(&quot;武进区&quot;, 320412);
areaCode.put(&quot;溧阳市&quot;, 320481);
areaCode.put(&quot;金坛市&quot;, 320482);
areaCode.put(&quot;苏州市&quot;, 320500);
areaCode.put(&quot;市辖区&quot;, 320501);
areaCode.put(&quot;鹤壁市&quot;, 410600);
areaCode.put(&quot;市辖区&quot;, 410601);
areaCode.put(&quot;鹤山区&quot;, 410602);
areaCode.put(&quot;山城区&quot;, 410603);
areaCode.put(&quot;淇滨区&quot;, 410611);
areaCode.put(&quot;浚　县&quot;, 410621);
areaCode.put(&quot;淇　县&quot;, 410622);
areaCode.put(&quot;新乡市&quot;, 410700);
areaCode.put(&quot;青白江区&quot;, 510113);
areaCode.put(&quot;新都区&quot;, 510114);
areaCode.put(&quot;温江区&quot;, 510115);
areaCode.put(&quot;金堂县&quot;, 510121);
areaCode.put(&quot;双流县&quot;, 510122);
areaCode.put(&quot;郫　县&quot;, 510124);
areaCode.put(&quot;大邑县&quot;, 510129);
areaCode.put(&quot;蒲江县&quot;, 510131);
areaCode.put(&quot;新津县&quot;, 510132);
areaCode.put(&quot;乾　县&quot;, 610424);
areaCode.put(&quot;礼泉县&quot;, 610425);
areaCode.put(&quot;永寿县&quot;, 610426);
areaCode.put(&quot;彬　县&quot;, 610427);
areaCode.put(&quot;长武县&quot;, 610428);
areaCode.put(&quot;旬邑县&quot;, 610429);
areaCode.put(&quot;淳化县&quot;, 610430);
areaCode.put(&quot;武功县&quot;, 610431);
areaCode.put(&quot;兴平市&quot;, 610481);
areaCode.put(&quot;渭南市&quot;, 610500);

//地区号
String  randomAreaCode=&quot;&quot;;
int index = (int) (Math.random() * areaCode.size());
Collection values = areaCode.values();
Iterator it = values.iterator();
int i = 0;
int code = 0;
while (i &lt; index &amp;&amp; it.hasNext()) {
  i++;
  randomAreaCode = it.next().toString();
}
generater.append(randomAreaCode);
//生日
String randomBirthday=&quot;&quot;;
Calendar birthday = Calendar.getInstance();
birthday.set(Calendar.YEAR, (int) (Math.random() * 60) + 1950);
birthday.set(Calendar.MONTH, (int) (Math.random() * 12));
birthday.set(Calendar.DATE, (int) (Math.random() * 31));
StringBuilder builder = new StringBuilder();
builder.append(birthday.get(Calendar.YEAR));
long month = birthday.get(Calendar.MONTH) + 1;
if (month &lt; 10) {
  builder.append(&quot;0&quot;);
}
builder.append(month);
long date = birthday.get(Calendar.DATE);
if (date &lt; 10) {
  builder.append(&quot;0&quot;);
}
builder.append(date);
randomBirthday= builder.toString();
generater.append(randomBirthday);

//随机码
String randomCode=&quot;&quot;;
int code = (int) (Math.random() * 1000);
if (code &lt; 10) {
  randomCode= &quot;00&quot; + code;
} else if (code &lt; 100) {
  randomCode= &quot;0&quot; + code;
} else {
  randomCode= &quot;&quot; + code;
}

generater.append(randomCode);
//验证码
char[]  chars= generater.toString().toCharArray();
int[] c = { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 };
char[] r = { &apos;1&apos;, &apos;0&apos;, &apos;X&apos;, &apos;9&apos;, &apos;8&apos;, &apos;7&apos;, &apos;6&apos;, &apos;5&apos;, &apos;4&apos;, &apos;3&apos;, &apos;2&apos; };
int[] n = new int[17];
int result = 0;
for (int i = 0; i &lt; n.length; i++) {
  n[i] = Integer.parseInt(chars[i] + &quot;&quot;);
}
for (int i = 0; i &lt; n.length; i++) {
  result += c[i] * n[i];
}
char validateCode = r[result % 11];
generater.append(validateCode);


vars.put(&quot;idNumber&quot;,generater.toString()) ;
SampleResult.setResponseData(generater.toString());</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="BeanShell Sampler--使用" enabled="true">
          <stringProp name="BeanShellSampler.query"> SampleResult.setResponseData(&quot;IdNumber: ${idNumber}&quot;);</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="察看结果树" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\svn\apache-jmeter-4.0\t.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
        <kg.apc.jmeter.perfmon.PerfMonCollector guiclass="kg.apc.jmeter.vizualizers.PerfMonGui" testclass="kg.apc.jmeter.perfmon.PerfMonCollector" testname="jp@gc - PerfMon Metrics Collector" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">D:\svn\apache-jmeter-4.0\mon.jtl</stringProp>
          <longProp name="interval_grouping">1000</longProp>
          <boolProp name="graph_aggregated">false</boolProp>
          <stringProp name="include_sample_labels"></stringProp>
          <stringProp name="exclude_sample_labels"></stringProp>
          <stringProp name="start_offset"></stringProp>
          <stringProp name="end_offset"></stringProp>
          <boolProp name="include_checkbox_state">false</boolProp>
          <boolProp name="exclude_checkbox_state">false</boolProp>
          <collectionProp name="metricConnections">
            <collectionProp name="1709939680">
              <stringProp name="235464278">192.168.126.163</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="66952">CPU</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-590774641">
              <stringProp name="235464278">192.168.126.163</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-1993889503">Memory</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="1298234610">
              <stringProp name="235464278">192.168.126.163</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="2112896831">Disks I/O</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
            <collectionProp name="-478434625">
              <stringProp name="235464278">192.168.126.163</stringProp>
              <stringProp name="1600768">4444</stringProp>
              <stringProp name="-274342153">Network I/O</stringProp>
              <stringProp name="0"></stringProp>
            </collectionProp>
          </collectionProp>
        </kg.apc.jmeter.perfmon.PerfMonCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
